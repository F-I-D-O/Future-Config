#pragma once

#include <yaml-cpp/yaml.h>
#include <string>

{% for include in includes %}
#include "{{ include }}"
{% endfor %}

{% for class in class_data %}
struct {{ class.class_name }} {
	{% for property in class.properties %}
		{% if property.mode == "scalar" %}
	{{ property.type }} {{ property.key }};
		{% else if property.mode == "object" %}
	{{ property.class_name }} {{ property.key }};
		{% else if property.mode == "array" %}
	std::vector<{{ property.item_type }}> {{ property.key }};
		{% endif %}
	{% endfor %}

	explicit {{ class.class_name }}(const YAML::Node& yaml_config){% if class.non_array_properties_count > 0 %}:
		{% for property in class.properties %}
			{% if property.mode == "scalar" %}
		{{ property.key }}(yaml_config["{{ property.key }}"].as<{{ property.type }}>())
			{% else if property.mode == "object" %}
		{{ property.key }}(yaml_config["{{ property.key }}"])
			{% endif %}
			{% if not loop.is_last %}
	,
			{% endif %}
		{% endfor %}
	{% endif %}
	{% if class.array_properties_count > 0 %}
	{
	{% for property in class.properties %}
		{% if property.mode == "array" %}
		const YAML::Node& yaml_array = yaml_config["{{ property.key }}"];
		for (const auto& yaml_item: yaml_array) {
			{{ property.key }}.push_back(yaml_item.as<{{ property.item_type }}>());
		}
		{% endif %}
	{% endfor %}
	};
	{% else %}
	{{empty_body}};
	{% endif %}
};

{% endfor %}