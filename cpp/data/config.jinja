#pragma once

#include <Config_object.h>
#include <string>

{% for include in includes %}
#include "{{ include }}"
{% endfor %}

{% for class in class_data %}
struct {{ class.class_name }} {
	{% for property in class.properties %}
		{% if property.mode == "scalar" %}
	{{ property.type }} {{ property.key }};
		{% else if property.mode == "object" %}
	{{ property.class_name }} {{ property.key }};
		{% else if property.mode == "array" %}
	std::vector<{{ property.item_type }}> {{ property.key }};
		{% endif %}
	{% endfor %}

	explicit {{ class.class_name }}(const fc::Config_object& config_object){% if class.non_array_properties_count > 0 %}:
		{% for property in class.properties %}
			{% if not loop.is_last %}
				{% set divider = "," %}
			{% else %}
				{% set divider = "" %}
			{% endif %}
			{% if property.mode == "scalar" %}
		{{ property.key }}(config_object.get<{{ property.type }}>("{{ property.key }}")){{ divider }}
			{% else if property.mode == "object" %}
		{{ property.key }}(config_object["{{ property.key }}"]){{ divider }}
			{% endif %}
		{% endfor %}
	{% endif %}
	{% if class.array_properties_count > 0 %}{
		{% for property in class.properties %}
			{% if property.mode == "array" %}
		for (const auto& item: config_object["{{ property.key }}"]) {
				{% if property.scalar_item %}
			{{ property.key }}.push_back(item.as<{{ property.item_type }}>());
				{% else %}
			{{ property.key }}.emplace_back(item);
				{% endif %}
		}
			{% endif %}
		{% endfor %}
	};
	{% else %}
	{{empty_body}};
	{% endif %}
};

{% endfor %}